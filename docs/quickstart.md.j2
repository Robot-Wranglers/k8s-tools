## Quickstart
<br/>

### Installation
<hr style="width:100%;border-bottom:3px solid black;">

The typical installation for the k8s-tools suite involves a few components, and is based on the assumption that you probably want to *embed and potentially modify the pieces* inside some existing project you've already started.  In other words: **fork and forget**.  

So basic installation is just copying files and making them executable:

```bash {.cli_example}
$ cd myproject 

# Download compose.mk, k8s.mk, and k8s-tools.yml
$ curl -sLo compose.mk \
    https://raw.githubusercontent.com/Robot-Wranglers/k8s-tools/master/compose.mk
$ curl -sLo k8s.mk \
    https://raw.githubusercontent.com/Robot-Wranglers/k8s-tools/master/k8s.mk
$ curl -sLo k8s-tools.yml \
    https://raw.githubusercontent.com/Robot-Wranglers/k8s-tools/master/k8s-tools.yml

# Make scripts executable
$ chmod +x compose.mk k8s.mk k8s-tools.yml

# Now equivalent to `make -f ...`
$ ./compose.mk ...
$ ./k8s.mk ...

# Now equivalent to `docker compose -f k8s-tools.yml ...`
$ ./k8s-tools.yml ...
```

That's it, and at this point you can already do lots of stuff by using `k8s.mk` in [tool mode]({{mkdocs.site_relative_url}}/tool-mode).  With the fork-and-forget approach, you can also strip containers you know that you'll never use from [the toolbox]({{mkdocs.site_relative_url}}/toolbox), and add new ones.

Read on for info about tighter project integration, library usage, and scripting.

### Single File
<hr style="width:100%;border-bottom:3px solid black;">

!!! warning "Experimental"
    Bundling for the single-file installation works fine for simple things, but isn't exercised yet by automated tests, and some advanced features of `compose.mk` might unavailable.

If you want fewer files, already know that you're not interested in extending `k8s.mk` or adjusting details for [the tool-containers]({{mkdocs.site_relative_url}}/toolbox), you can opt instead for the **monolithic install** that bundles all 3 files together.

```bash {.cli_example}
$ cd myproject 

# Download compose.mk, k8s.mk, and k8s-tools.yml
$ curl -sLo compose.mk \
    https://raw.githubusercontent.com/Robot-Wranglers/k8s-tools/master/k8s
$ chmod +x ./k8s

# Alternatively, generate `k8s` omnibus from existing files:
$ bin=./k8s ./compose.mk mk.fork/k8s.mk,k8s-tools.yml
```

For more background and details building bundles from scratch, see [the upstream docs]({{jinja.vars.composemk_docs_url}}/standard-lib/#forks-guests-and-payloads).


### Project Integration
<hr style="width:100%;border-bottom:3px solid black;">

For [library usage]({{mkdocs.site_relative_url}}/lib) from your project automation and for orchestrating stuff in [the toolbox]({{mkdocs.site_relative_url}}/toolbox), you'll want something like this inside your project Makefile:

```Makefile {.language-makefile .snippet}
# Include the `k8s.mk` library
include k8s.mk

# Generate target scaffolding for the tool containers
$(call compose.import, file=k8s-tools.yml)
```

For the [monolithic install](#single-file), the `compose.import` is implied, so just use `include k8s`.

### Local Clusters
<hr style="width:100%;border-bottom:3px solid black;">

!!! tip Note 
    Local clusters with lots of containers might require increasing the OS limits for open-files.  See [the kind docs](https://kind.sigs.k8s.io/docs/user/known-issues#pod-errors-due-to-too-many-open-files) for hints about increasing this value.

Using local clusters isn't required, but it is a typical use-case and one thing that `k8s.mk` specializes in.  Besides the caveat for open-files, this requires no additional setup and has no extra dependencies.  For an overview, see the [intro to local clusters]({{mkdocs.site_relative_url}}/local-clusters), and for an example you can [pick a random demo]({{mkdocs.site_relative_url}}/demos) since most will involve some kind of cluster-lifecycle management.

### For Developers
<hr style="width:100%;border-bottom:3px solid black;">

To run demos yourself, clone the repository.

```bash {.cli_example}
# For ssh
$ git clone git@github.com:Robot-Wranglers/k8s-tools.git

# Or for http
$ git clone https://github.com/Robot-Wranglers/k8s-tools.git

# Pre-cache for main containers
$ make build 

# Run all the demos
$ make demos

# Run only CMK-lang demos
$ make demos/cmk
```
