{% import 'macros.j2' as macros -%}

## Multi-Cluster Networking with Submariner
<hr style="width:100%;border-bottom:3px solid black;">

In other documentation we've already looked at [basic automation](#) and a [single-cluster lifecycle](#).  This example remains project-local, but sets up 2 clusters, then connects with [submariner](#).  There are no host dependencies at all except for `make` and `docker`, and the entire thing runs well locally or [inside of github actions]({{github.actions_url}}/multicluster.yml).

This is basically an adaptation from the [official submariner docs](#) and their documentation, and [this blogpost](https://piotrminkowski.com/2021/07/08/kubernetes-multicluster-with-kind-and-submariner/) was also very helpful.  The details are all adapted for working with `k3d` instead of `kind`. 

Since `k8s.mk` is built on top of [compose.mk]({{jinja.vars.composemk_docs_url}}), you'll want some of that background to completely understand the [demo code](#source-code), but for the most part it should be pretty easy to read and adapt.

---------------

The rest of this page is structured as follows.  [Basic Usage](#basic-usage) is up first, then [a (big) screenshot of end to end execution](#end-to-end-output).  After that we walk through some [other more interactive workflows](#interactive-workflows), and cap it off with the [inlined demo source code](#source-code).  The source is also available from the repository, see {{macros.repo_link('demos/cluster-lifecycle.mk', github)}}.

### Basic Usage
<hr style="width:100%;border-bottom:3px solid black;">

Running the demo is simple: 

```bash 

# Default entrypoint runs clean, create, deploy, test, but does not tear down the cluster.  
$ ./demos/cluster-lifecycle.mk

# End-to-end, again without teardown
$ ./demos/cluster-lifecycle.mk clean create deploy test

# Interactive shell for a cluster pod
$ ./demos/cluster-lifecycle.mk cluster.shell 

# Finally, teardown the cluster
$ ./demos/cluster-lifecycle.mk teardown
```

### End-to-End Output
<hr style="width:100%;border-bottom:3px solid black;">

The following *(large)* image shows the full output of `./demos/cluster-lifecycle.mk clean create deploy test teardown`.  

One particularly interesting feature is the *graphical preview* of pod/sevice topologies from various namespaces that you can see below.  Topology previews are console-friendly and work from CI/CD like github-actions, which allows you to **visually parse the results of complex orchestration** very quickly.  At this high level of detail you won't be able tell specifics, but it's very useful for showing whether results have changed.

{{macros.img_link("cluster-lifecycle.png", mkdocs, "33%")}}

### Interactive Workflows
<hr style="width:100%;border-bottom:3px solid black;">

An aspect of the demo that hasn't been exercised yet by the end-to-end example above is grafana installation.  You can automate all of this stuff too, but stepping through it is useful to show debugging and prototyping workflows.  So let's do it manually just for fun, then inspect the results using other `k8s.mk` tooling.  

#### Bootstrap
<hr style="width:95%;border-bottom:1px dashed black;">
Basic grafana deployment just uses the established entrypoint `deploy.grafana`.  We'll prefix the {{macros.api_link('k8s.wait', mkdocs)}} target to ensure the cluster is ready before starting, which probably isn't needed, but is a good reminder that the [whole internal API]({{mkdocs.site_relative_url}}/api) is automatically available as a CLI.

```bash 
$ ./demos/cluster-lifecycle.mk k8s.wait deploy.grafana
.. lots of output ..
```
See [the source code](#source-code) for the `deploy.grafana` implementation, 

### Source Code 
<hr style="width:100%;border-bottom:3px solid black;">

```Makefile
{{open('demos/multicluster.mk','r').read().strip()}}
```

<hr style="width:100%;border-bottom:3px solid black;">

{#
<hr style="width:95%;border-bottom:1px dashed black;">
#}