{% import 'macros.j2' as macros -%}

## Cluster Lifecycle Demo
<hr style="width:100%;border-bottom:3px solid black;">

The cluster lifecycle demo shows an example of a project-local kubernetes cluster.  It's managed via [`k8s.mk`]({{mkdocs.site_relative_url}}), which is orchestrating usage of several different tools like `k3d`, `kubectl`, `helm`, and `ansible` to install things like Nginx and Prometheus.

There are no host dependencies at all except for `make` and `docker`, and the entire thing runs locally or [inside of github actions]({{github.actions_url}}/cluster-lifecycle.yml).

Since `k8s.mk` is built on top of [compose.mk]({{jinja.vars.composemk_docs_url}}), you'll want some of that background to completely understand the [demo code](#source-code), but for the most part it should be pretty easy to read and adapt.

---------------

The rest of this page is structured as follows.  [Basic Usage](#basic-usage) is up first, then [a (big) screenshot of end to end execution](#end-to-end-output).  After that we walk through some [other more interactive workflows](#interactive-workflows), and cap it off with the [inlined demo source code](#source-code).  The source is also available from the repository, see {{macros.repo_link('demos/cluster-lifecycle.mk', github)}}.

### Basic Usage
<hr style="width:100%;border-bottom:3px solid black;">

Running the demo is simple: 

```bash 

# Default entrypoint runs clean, create, deploy, test, but does not tear down the cluster.  
$ ./demos/cluster-lifecycle.mk

# End-to-end, again without teardown
$ ./demos/cluster-lifecycle.mk clean create deploy test

# Interactive shell for a cluster pod
$ ./demos/cluster-lifecycle.mk cluster.shell 

# Finally, teardown the cluster
$ ./demos/cluster-lifecycle.mk teardown
```

### End-to-End Output
<hr style="width:100%;border-bottom:3px solid black;">

The following *(large)* image shows the full output of `./demos/cluster-lifecycle.mk clean create deploy test teardown`.  One particularly interesting feature is the preview of pod/sevice topologies from various namespaces that you can see below.  Topology previews are console-friendly, and work from CI/CD like github-actions, which allows you to **visually parse the results of complex orchestration** very quickly.  At this high level of detail you won't be able tell specifics, but it's very useful for showing whether results have changed.

{{macros.img_link("cluster-lifecycle.png", mkdocs, "33%")}}

### Interactive Workflows
<hr style="width:100%;border-bottom:3px solid black;">

One aspect of the demo that hasn't been exercised yet by the end-to-end example above is grafana installation.

```bash 
$ ./demos/cluster-lifecycle.mk deploy.grafana
```

### Source Code 
<hr style="width:100%;border-bottom:3px solid black;">

```Makefile
{{open('demos/cluster-lifecycle.mk','r').read().strip()}}
```


<hr style="width:100%;border-bottom:3px solid black;">

{#
<hr style="width:95%;border-bottom:1px dashed black;">
#}