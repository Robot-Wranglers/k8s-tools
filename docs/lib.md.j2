{% import 'macros.j2' as macros -%}

## Library Overview 
<hr style="width:100%;border-bottom:3px solid black;">


**In library-mode,** `k8s.mk` is used as an `include` from your project Makefile (see the [installation docs]({{mkdocs.site_relative_url}}/integration) for more details).  After including `k8s.mk`, you'll have access to:

1. The full capabilities of the parent project, i.e. [compose.mk]({{jinja.vars.composemk_docs_url}})
1. [Scaffolded targets]({{mkdocs.site_relative_url}}/k8s.mk/#tool-container-basics) for each k8s-tools.yml [tool container]({{mkdocs.site_relative_url}}/toolbox)
1. The `k8s.mk` automation library, which offers many reusable static targets that you can [call directly use from the command line]({{mkdocs.site_relative_url}}/tool-mode), or use programmatically, as part of normal tasks/prereqs inside your project Makefile.

### Module Layout
<hr style="width:100%;border-bottom:3px solid black;">

Here's an overview for how the `k8s.mk` library is organized into modules: you can dive into the module or target-level documentation anywhere that looks interesting.  If you prefer a more guided tour, check out the rest of this page for a few of the random highlights.

!!! road_map "Module Layout"
    [**`k8s.*` targets:**]({{mkdocs.site_relative_url}}/api/#api-k8s) 
    :  General cluster tools, many of which are just wrappers for kubectl. Focusing especially on waiting on resources, retrieving resource details, and applying manifests from files or streams.  Targets here are [container-agnostic]({{mkdocs.site_relative_url}}/idioms); if called from the host, requests are routed to appropriate tool containers.

    [**`kubectl.*` targets:**]({{mkdocs.site_relative_url}}/api/#api-kubectl) 
    :  Low-level helpers for `k8s.*`, these targets either require kubectl/helm, or should be called only from inside containers.
    
    [**`ansible.*` targets:**]({{mkdocs.site_relative_url}}/api#api-ansible) 
    :  Adhoc-ansible, exposed directly as make-targets.  As usual, this does not require ansible on the docker host, and can be used from the CLI or as prerequisites in recipes.

    [**`argo.*` targets:**]({{mkdocs.site_relative_url}}/api#api-argo) 
    :  Placeholder

    [**`fission.*` targets:**]({{mkdocs.site_relative_url}}/api#api-fission) 
    :  Placeholder

    [**`k3d.*` targets:**]({{mkdocs.site_relative_url}}/api#api-k3d) 
    : Placeholder

    [**`kubefwd.*` targets:**]({{mkdocs.site_relative_url}}/api#api-kubefwd) 
    :  Placeholder

    [**`minikube.*` targets:**]({{mkdocs.site_relative_url}}/api#api-minikube)
    : Placeholder



{#If you prefer a more guided tour, check out the rest of this page for a few of the random highlights.
#### API: compose
<hr style="width:100%;border-bottom:3px solid black;">

{{macros.parse_module_help('compose.mk', 'compose')}}

{{macros.parse_help('compose.mk', 'compose', github)}}

[**`helm.*` targets:**]({{mkdocs.site_relative_url}}/api#api-helm) 
:  Placeholder
[**`k8s.*` targets:**]({{mkdocs.site_relative_url}}/api#api-k8s) 
:  Placeholder


[**`kind.*` targets:**]({{mkdocs.site_relative_url}}/api#api-kind) 
:  Placeholder

#}

<hr style="width:100%;border-bottom:3px solid black;">

{#
[^1]: See also [GMSL](https://mxe.cc/gmsl.html), but it's mostly datastructures.
[^2]: Make-targets can be used as task-prerequisites as well as command line entrypoints.
#}