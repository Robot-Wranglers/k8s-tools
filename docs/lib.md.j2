{% import 'macros.j2' as macros -%}

## Library Overview 
<hr style="width:100%;border-bottom:3px solid black;">

{#Because `make` has never really had a standard library[^1], there's lots of pretty basic stuff that is conspicuously missing.  This includes things like [logging and colored output](#logging-facilities), but also the kind of [online help]({{mkdocs.site_relative_url}}/cli-help) that can help you list and inspect automation that's been defined.  This page has a tutorial-style intro to some of the more interesting capabilities.  *(If you're looking for something more like reference material, [the full target API]({{mkdocs.site_relative_url}}/api) is generated from source.)*#}

**In library-mode,** `k8s.mk` is used as an `include` from your project Makefile (see the [installation docs]({{mkdocs.site_relative_url}}/integration) for more details).  After including `k8s.mk`, you'll have access to a a library of make-targets and macros.  
{#
In a few cases, `compose.mk` supports "scaffolded" target that are dynamic, but that is [documented]({{mkdocs.site_relative_url}}/bridge) [elsewhere]({{mkdocs.site_relative_url}}/demos/polyglots/#foreign-code-as-first-class).  Code style considerations for both the internal library and external extensions is documented somewhat [here]({{mkdocs.site_relative_url}}/style)
#}

Most of what `k8s.mk` offers is in the form of **reusable static targets, which you can directly use from the command line**, or **use as part of normal tasks/prereqs inside your project Makefile**.  


{#
* **No host dependencies.** This uses the `compose.mk:tux` tool container to dockerize tmux itself.Built-in supervisor process, [improving support for signal handling](#signals-and-supervisors).
  * **Supports docker-in-docker style host-socket sharing with zero configuration,** so your TUI can generally do all the same container orchestration tasks as the docker host.
  * Combines well with `flux.*` targets to quickly create dashboards / custom development environments.

With that in place, you have access to a few different possibilities:

1. Autogenerated **[build a bridge between docker-compose services and make-targets](#makecompose-bridge)** and [**dispatch make-targets inside tool containers.**](#container-dispatch).  
#}

### Module Layout
<hr style="width:100%;border-bottom:3px solid black;">

Here's an overview for how the `k8s.mk` library is organized into modules: you can dive into the module or target-level documentation anywhere that looks interesting.  

{#If you prefer a more guided tour, check out the rest of this page for a few of the random highlights.#}

[**`ansible.*` targets:**]({{mkdocs.site_relative_url}}/api/#api-ansible) 
:  Placeholder

[**`helm.*` targets:**]({{mkdocs.site_relative_url}}/api#api-helm) 
:  Placeholder

[**`k3d.*` targets:**]({{mkdocs.site_relative_url}}/api#api-k3d) 
:  Placeholder

[**`k8s.*` targets:**]({{mkdocs.site_relative_url}}/api#api-k8s) 
:  Placeholder

[**`kind.*` targets:**]({{mkdocs.site_relative_url}}/api#api-kind) 
:  Placeholder

[**`kubectl.*` targets:**]({{mkdocs.site_relative_url}}/api#api-kubectl) 
:  Placeholder

[**`fission.*` targets:**]({{mkdocs.site_relative_url}}/api#api-docker) 
:  Placeholder

<hr style="width:100%;border-bottom:3px solid black;">

{#
[^1]: See also [GMSL](https://mxe.cc/gmsl.html), but it's mostly datastructures.
[^2]: Make-targets can be used as task-prerequisites as well as command line entrypoints.
#}