## Integration
<br/>

### Integration With Your Project
<hr style="width:100%;border-bottom:3px solid black;">

The k8s-tools suite can be integrated with your project in a few ways, either with some kind of [global compose file and global aliases](#tools-via-simple-aliases) (*not recommended*), or with [a more project-based approach](#embedding-tools-with-makefiles).  

See also the [compatibility notes from compose.mk docs]({{jinja.vars.composemk_docs_url}}/integration#compatibility-notes).  

{#
### Compatibility Notes

Platforms used in development include modern docker (say `25+`), make (`3.8+`), and bash `(~5`) on both Linux and MacOS. Testing in github-actions only uses Linux, and won't try every possible combination of versions.  

In general, *the goal is to support most things you'll encounter in the wild*, including OSX, out of the box.  But you may see some of the usual problems with certain arguments to non-posix OSX default `sed` / `ps` / `xargs`, etc.  Please report issues!
#}

### Tools Via Simple Aliases
<hr style="width:100%;border-bottom:3px solid black;">

The simplest and most global way to use k8s-tools.yml is to just download it and setup shell aliases, ignoring `compose.mk` and `k8s.mk`.  Not generally recommended, since this is the least project-based, least portable thing you can do. 

```bash
$ cd myproject

# or use your fork/clone..
$ curl -sL {{github.raw_url}}/master/k8s-tools.yml > k8s-tools.yml

$ alias helm=docker compose -f myproject/k8s-tools.yml run helm

$ helm ....
```

 It's not bad for experiments, but *don't write scripts based on this an expect to ship them to coworkers or build bots!*  Aliases need their own install-script or install instructions, and tend to be fragile, for example the above approach will break if you move your `myproject` folder around.  **See the next sections for something that is both more flexible and more durable.**

### Embedding Tools With Makefiles
<hr style="width:100%;border-bottom:3px solid black;">

You'll probably want to read over the [compose.mk]({{mkdocs.site_relative_url}}/compose.mk) section to really understand what's going on here.  In case you've already seen it though, here's the quick start with the copy/paste stuff.

First, copy the files from this repo into your project:

```bash
$ cd myproject 

# Download the compose file with the tool containers
$ curl -sL \
  {{github.raw_url}}/master/k8s-tools.yml \
    > k8s-tools.yml

# Download the compose.mk automation lib
$ curl -sL \
  {{github.raw_url}}/master/compose.mk \
    > compose.mk

# Download the k8s.mk automation lib.
$ curl -sL \
  {{github.raw_url}}/master/k8s.mk \
    > k8s.mk

```

These 3 files are usually working together, but in some cases they are useful in a stand-alone mode.  Make them all executable like this:

```bash
$ chmod ugo+x k8s-tools.yml compose.mk k8s.mk

# equivalent to `make -f k8s.mk ..`
./k8s.mk ... 

# equivalent to `make -f compose.mk ..`
$ ./compose.mk ... 

# equivalent to `docker compose -f k8s-tools.yml run ...`
$ ./k8s-tools.yml run ...
```

That's all the setup you'll need just for using tools directly.  See the next section for more information/examples re: stand-alone mode.

If you're interested in tighter integration like setting up the [Make/Compose bridge]({{mkdocs.site_relative_url}}/compose.mk#makecompose-bridge) or preparing for [Container Dispatch]({{mkdocs.site_relative_url}}/compose.mk#container-dispatch), here's a quick example of what your project Makefile should look like:

```Makefile
# myproject/Makefile (Make sure you have real tabs, not spaces!)
 
# Include/invoke the target-building macros 
# somewhere near the top of your existing boilerplate
include compose.mk
$(eval $(call compose.import, ▰, TRUE, k8s-tools.yml))

# At this point, targets are defined for whatever services
# are mentioned in the external compose config, and they are
# ready to use. Now you can dispatch any task to any container!
test: ▰/k8s/self.test
self.test:
  kubectl --version
  echo hello world from `uname -n -v`
```

{#
### Stand Alone Tools

If you're not interested in custom automation that requires project-Makefile integration, some features of `compose.mk` and `k8s.mk` can be used without that.  See for example the [Loading Compose Files]({{mkdocs.site_relative_url}}/compose.mk#loading-compose-files) docs, plus the [full CLI docs]({{mkdocs.site_relative_url}}/api) for more details.

### Forks & Versioning the Versioner

Given the advice above to simply copy components that interest you directly into your project repositories, some people might be reading this and thinking **what if k8s-tools.yml, compose.mk, or k8s.mk change upstream?**  

If you're really worried about this, you can always setup `k8s-tools.git` (or your fork of it) as a git submodule inside your project folder.. but hopefully that's not necessary, because files aren't expected to change often.  There's a few reasons for this:

* [Most config won't require edits]({{mkdocs.site_relative_url}}/config).  If it *does* require edits, then it's probably the type of thing that's small, permanent, and only useful locally so you wouldn't want to commit it upstream anyway.  

* Default versions of `k8s-tools.yml` tool-containers might get bumped occassionally, but projects should pin their own defaults/overrides anyway, so it's not the type of thing you probably want a project subscribed to.  Otherwise, the base feels "complete" enough that it's unlikely grow towards lots of totally new tools.

* The API for both `compose.mk` and `k8s.mk` is also approaching "frozen".

#}