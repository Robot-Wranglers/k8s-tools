{% import 'macros.j2' as macros -%}

## API: k8s.mk
<hr style="width:100%;border-bottom:3px solid black;">

This is the complete list of namespaces & *static public targets* that are available from `k8s.mk`, along with their documentation.  Documentation is pulled automatically from [the latest source]({{github.repo_url}}/tree/master/k8s.mk). 

Dynamic target scaffolding is also generated in a several categories for each of the containers defined in `k8s-tools.yml`, such as helpers for target-dispatch, debugging shells for that container, etc.  For an overview of autogenerated targets, see instead the [upstream compose.mk documentation]({{jinja.vars.composemk_docs_url}}/bridge).  See also the overview of [CLI help]({{jinja.vars.composemk_docs_url}}/cli-help).


### k8s.mk: (Static Targets)
<hr style="width:100%;border-bottom:3px solid black;">

* **Targets are usable as an API,** either as prereq-targets or as part of the body in your project automation.
* **Targets are usable interactively from your shell** as `./k8s.mk <target>` or `make <target>` if you've include'd the library file.
* **You'll need to have setup KUBECONFIG before running most of these**

{#The best way to use these targets is in combination with `compose.mk` and `k8s-tools.yml`, following the [integration docs](/#embedding-tools-with-makefiles).  See also the docs for the [Make/Compose Bridge](/#makecompose-bridge) and [Container Dispatch](/#container-dispatch).  Still, many of these targets can run "natively" if your host already has the relevant tools, and some targets can default to using tools if present, falling back to using tool-containers.
#}

Target names are reserved names after declaration, but collisions aren't likely because things are organized into a few namespaces:

* **Most targets depend on compose.mk.** When used in stand-alone mode, k8s.mk will attempt to import compose.mk from the same directory.
* **Most targets have a soft-requirement k8s-tools.yml.** This isn't always a hard-requirement if you have tools like `kubectl` available already on the docker-host.
* **Targets are usable interactively from your shell** as `make <target>` or `./k8s.mk <target>`.  If you use k8s.mk directly here, you need to set vars like `KUBECONFIG` yourself instead of relying on your project Makefile to set them up.
* **Targets are usable as an API,** either as prereq-targets or as part of the body in your targets.
* **Target names are reserved names after declaration.**
Things are organized into a few namespaces, which hopefully avoids collisions with your project targets.

* [k8s.* targets:](#api-k8s) Default namespace with general helpers.  These targets only use things available in the [k8s:base container](k8s.yml).
* [k3d.* targets:](#api-k3d):  Helpers for working with the `k3d` tool / container
* [kubefwd.* targets:](#api-kubefwd) Helpers for working with `kubefwd` tool / container
* [helm.* targets:](#api-helm) Helpers for working with `helm` tool / container

{% set help_extra="Docs below typically refer to `compose.mk` as the executable involved, but if you're using integrated rather than stand-alone mode, you should use `make` instead to work with your own project's context!" %}

#### API: k8s
<hr style="width:100%;border-bottom:3px solid black;">

{{macros.parse_module_help('k8s.mk','k8s')}}

For more details, read on into the API, or see the [k8s:base container spec in k8s-tools.yml]({{macros.search_link('k8s-tools.yml', 'k8s:base', github)}})

{{macros.parse_help('k8s.mk', 'k8s.')}}

#### API: ansible
<hr style="width:100%;border-bottom:3px solid black;">

{{macros.parse_module_help('k8s.mk', 'ansible')}}

These targets use [the ansible container]({{macros.search_link('k8s-tools.yml','k8s:ansible',github)}}), but are generally safe to run from the docker-host.  

{{macros.parse_help('k8s.mk', 'ansible')}}

#### API k3d
<hr style="width:100%;border-bottom:3px solid black;">

{{macros.parse_module_help('k8s.mk','k3d')}}

For more details, read on into the API, or see the [k8s:k3d container spec in k8s-tools.yml]({{macros.search_link('k8s-tools.yml', 'k3d', github)}})
  
{{macros.parse_help('k8s.mk', 'k3d')}}

#### API: kubefwd
<hr style="width:100%;border-bottom:3px solid black;">

These targets use [the kubefwd container]({{macros.search_link('k8s-tools.yml','k8s:kubefwd',github)}}), but are generally safe to run from the docker-host. 

{{macros.parse_module_help('k8s.mk','kubefwd')}}

{{macros.parse_help('k8s.mk', 'kubefwd')}}

#### API: helm
<hr style="width:100%;border-bottom:3px solid black;">

{{macros.parse_module_help('k8s.mk','helm')}}

For more details, read on into the API, or see the [`k8s:helm` container spec in k8s-tools.yml]({{macros.search_link('k8s-tools.yml', 'helm', github)}}).

{{macros.parse_help('k8s.mk', 'helm')}}
