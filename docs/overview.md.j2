{% import 'macros.j2' as macros -%}

## Overview
<hr style="width:100%;border-bottom:3px solid black;">

Meet the **k8s-tools suite**, which aggregates 30+ individual utilities for working with kubernetes into a single dockerized toolchain, and provides an automation framework for extending and interacting it. Project-local clusters, cluster lifecycle automation, customizable TUIs, and more.

{{macros.img_link("e2e-k3d.commander.gif", mkdocs, "90%")}}

**k8s-tools** operates at a project-automation layer and is designed to embrace and extend other tools, so it doesn't really conflict or compete with anything.  It's useful for CI/CD pipelines or prototyping systems and is designed to be [embedded alongside existing projects]({{mkdocs.site_relative_url}}/integration).  By using dockerized versions of `k3d` or `kind`, many operations for "clusters" can use docker for node groups as well, which makes it easy to do things like running end-to-end tests completely inside your existing CI without any need for external clusters.

This reference focuses on a few use-cases in particular:

1. **Cluster lifecycle / development / debugging workflows** in general.
1. **Project-local kubernetes clusters & corresponding lifecycle automation** using `kind` or `k3d`.
1. **Decoupling project automation** from the choice of CI/CD backend.
1. **Separation of automation tasks** from specifications for runtime / container context.
1. **Per-project tool-versioning**, providing defaults but allowing overrides, and ensuring versions match everywhere.
1. **Less shell code in general,** but where we need it: it <u>shouldn't</u> be embedded in YAML, Jenkinsfiles, etc.

This is a sibling project for [compose.mk]({{jinja.vars.composemk_docs_url}}), which is a more general automation framework: the k8s-tools suite also serves as a reference implementation for extending it. <font color=red>Docs here are still incomplete and a work in progress,</font> but you'll find lots of working examples and hands-on tutorials.

### Introduction
<hr style="width:100%;border-bottom:3px solid black;">

At a high level, the **k8s-tools suite** has 2 main components that can be used individually or together.  Those components are *a collection of tool-container definitions*, and an *automation framework for extending and interacting with the containers*.

--------------------------------

**[`k8s-tools.yml`]({{mkdocs.site_relative_url}}/features)**

:   Aggregates 30+ individual utilities for working with kubernetes into one dockerized toolchain, hosted inside a single docker-compose file.  Official sources are used where possible and containers defined here aren't built from scratch.  Low-level tools (*like `kubectl`, `helm`, etc*) mostly come from [alpine/k8s](https://hub.docker.com/r/alpine/k8s) but [many other tools]({{mkdocs.site_relative_url}}/toolbox) (*like `argo`, `helm`, `knative`, `cdk`, `k9s`, `k3d`, `ansible`, etc*) are also included.  Tools containers are versioned independently, using defaults but allowing overrides, and are pulled only if/when they are used.

**[`k8s.mk`]({{mkdocs.site_relative_url}}/k8s.mk)**

:   A library/utility that builds on k8s-tools.yml, providing powerful ways to run automation **inside** the tool-containers and script orchestration **across** them.  As a stand-alone utility, `k8s.mk` can enable interactive workflows like inspection and debugging.  As a library, it's especially useful for prototyping, and you can very quickly build on it to express custom project automation that's surprisingly **portable, powerful, and flexible**.

### Getting Started 
<hr style="width:100%;border-bottom:3px solid black;">

If you're waiting to learn more about what the k8s-tools suite can **do**, start at the [main demo for cluster lifecycle management]({{mkdocs.site_relative_url}}/demos/cluster-lifecycle).  Jump directly to [the quickstart]({{mkdocs.site_relative_url}}/) if you want to start experimenting, or the [introduction to automation]({{mkdocs.site_relative_url}}/k8s.mk) if you want to read a bit first.  

{#
<hr style="width:95%;border-bottom:1px dashed black;">
1. Generally modernizing & extending `make` for containers, colors, & concurrency

Amongst other things it can help to fix the problem of different project developers using different local versions of things like `helm`, `kubectl`, etc.

You can also think of this project as a reference implementation for a pattern that [bridges compose services and Makefile targets]({{mkdocs.site_relative_url}}/compose.mk#makecompose-bridge), creating a "minimum viable automation framework" for things like [orchestrating tasks across tool containers]({{mkdocs.site_relative_url}}/compose.mk/#container-dispatch).  It's expressive and flexible, yet also focused on minimizing both conceptual overhead and software dependencies.  It's incredibly useful for lots of things, and whether it is a tool, a library, or a framework depends on how you decide to use it.  


There's a lot of hate for `make` (especially for "creative" usage of it!), but you'll find that these are not the Makefile's of your ancestors.  Support for [container dispatch]({{mkdocs.site_relative_url}}/compose.mk#container-dispatch) feels like a tiny, unobtrusive DSL on top of tech you already know, and you can run it anywhere you are.  Less time spent negotiating with bolted-on plugin-frameworks, hook systems, and build-bots, more time for the problems you care about.  And yes, *the build-bots themselves will be happy to run your automation,* and the output is easy to parse.  See the [this repo's github actions](https://robot-wranglers.github.io/k8s-tools/actions?query=branch%3Amaster), which bootstrap and exercise a cluster as part of the [end to end tests]({{mkdocs.site_relative_url}}/demos#demo-cluster-automation).

**Working with [compose.mk]({{mkdocs.site_relative_url}}/compose.mk) and [k8s.mk]({{mkdocs.site_relative_url}}/k8s.mk) makes `make` hit different.**  

Beyond addressing the issues above, these tools add new capabilities to `make` itself, including some support for [quickly building custom TUIs]({{mkdocs.site_relative_url}}/compose.mk#embedded-tui) from dockerized components.

{{macros.img_link("tui-6.gif", mkdocs, "90%")}}

With or without the TUI, all output is carefully curated and logged to appropriate output streams, aiming to be readable and human-friendly on stderr, while still remaining machine-friendly for downstream processing on stdout.  Help not only *works,* it also goes beyond mere target-listing to actually include namespace and per-target documentation, rendered via a dockerized version of [charmbracelete/glow](https://github.com/charmbracelet/glow).

{{macros.img_link("tui-7.gif", mkdocs, "90%")}}
#}

{#
*Meet `compose.mk`, tool / library /framework for makefile-based automation, scripting, and lightweight orchestration.**  Native support for docker, docker-compose, workflow primitives, TUI elements, and more.

Meet **`compose.mk`,** which describes core support for docker, docker-compose, and other extensions for `make`, and **`k8s.mk`,** which uses `compose.mk` to build automation APIs over the `k8s-tools.yml` containers.
Besides bundling some tooling in k8s-tools.yml, there are 2 other components that can help to build automation.

**The full triple of *k8s.mk*, *compose.mk*, and *k8s-tools.yml* is called the k8s-tools suite.** 
<strong>`compose.mk` extends `make` to add native support for docker, workflows, TUI elements, and more.</strong>

## Overview
<hr style="width:95%;border-bottom:1px dashed black;">

#}
