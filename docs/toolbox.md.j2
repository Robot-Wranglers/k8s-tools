{% import 'macros.j2' as macros -%}

## Toolbox & Manifest
<hr style="width:100%;border-bottom:3px solid black;">

**[k8s-tools.yml](k8s-tools.yml)** is a docker compose file with 20+ container specifications covering popular platforming tools and other utilities for working with Kubernetes.  

### Toolbox Manifest 
<hr style="width:100%;border-bottom:3px solid black;">

Here's a quick overview of the manifest and some details about versioning:

**Local parts of the tool bundle:** *([latest here]({{github.repo_url}}/tree/master/k8s-tools.yml))*

* Cluster management: [kind](https://github.com/kubernetes-sigs/kind), [k3d](https://k3d.io/)
* Workflows, FaaS, and Misc Platforming Tools: [argocli](https://argo-workflows.readthedocs.io/en/latest/walk-through/argo-cli/), [kn](https://knative.dev/docs/client/install-kn/), [fission](https://fission.io/docs/installation/), [rancher](https://github.com/rancher/cli)
* Lower-level helpers: [helmify](https://github.com/arttor/helmify), [kompose](https://kompose.io/), [kubefwd](https://github.com/txn2/kubefwd)
* Monitoring and metrics tools: [promtool](https://prometheus.io/docs/prometheus/latest/command-line/promtool/), [k9s](https://k9scli.io/), [lazydocker](https://github.com/jesseduffield/lazydocker)
* Krew plugins: [sick-pods](https://github.com/alecjacobs5401/kubectl-sick-pods), [ktop](https://github.com/vladimirvivien/ktop), [kubectx, and kubens](https://github.com/ahmetb/kubectx) available by default, and more on demand.
* TUI and user-messaging utilities: [gum](https://github.com/charmbracelet/gum), [pv](https://www.ivarch.com/programs/pv.shtml), [spark](https://raw.githubusercontent.com/holman/spark/), [tte](https://github.com/ChrisBuilds/terminaltexteffects)
* General Utilities: Fixed (i.e. non-busybox) versions of things like date, ps, uuidgen, etc

**Upstream parts of the tool bundle:** *([latest here](https://github.com/alpine-docker/k8s/blob/master/README.md#installed-tools))*

* Cluster management: [eksctl](https://github.com/weaveworks/eksctl)
* Core Utilities: [kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/), [kustomize](https://github.com/kubernetes-sigs/kustomize), [helm](https://github.com/helm/helm), [krew](https://github.com/kubernetes-sigs/krew)
* Misc Utilities: [helm-diff](https://github.com/databus23/helm-diff), [helm-unittest](https://github.com/helm-unittest/helm-unittest), [helm-push](https://github.com/chartmuseum/helm-push), [kubeseal](https://github.com/bitnami-labs/sealed-secrets), [vals](https://github.com/helmfile/vals), [kubeconform](https://github.com/yannh/kubeconform)
* Cloud Utilities: [awscli v1](https://github.com/aws/aws-cli), [aws-iam-authenticator](https://github.com/kubernetes-sigs/aws-iam-authenticator)
* General Utilities: Such as bash, curl, jq, yq, etc
* **Upstream tool versioning is determined by the alpine-k8s base,**
  * But `k8s-tools.yml` has service-stubs for quick overrides if you need something specific.

### Curated Tool Containers
<hr style="width:100%;border-bottom:3px solid black;">

The collection is structured in the following ways:

1. **Executable file,** i.e. `./k8s-tools.yml ...`  is equivalent to `docker compose -f k8s-tools.yml ...`
1. **Tool containers are easy to change or extend, in place.**  We use the [dockerfile_inline directive](https://docs.docker.com/compose/compose-file/build/#dockerfile_inline) to avoid extra clutter.  Customize them if you need to, and you can still avoid having N Dockerfiles cluttering up your whole repository.
1. **Default versions for container-bases are provided,** but you can set an environment variable to [override them individually]({{mkdocs.site_relative_url}}/config#k8stoolsyml).
1. **Sane defaults for volumes & environments are included for each tool-container,** meaning that sharing the working directory, docker socket, and kubeconfigs is done automatically.  For host vs. container file permissions, `k8s-tools.yml` also attempts to provide *smoother operations with root-user containers* to avoid the common problem of messing up file permissions on the host.  
1. **All tool containers are just-in-time & on-demand,** so that having these declared in case of eventual use won't saddle you with an enormous bootstrap process.  As usual with docker-compose, containers aren't pulled until they are used, and build-when-changed mostly works as you'd expect.  

The overall focus for `k8s-tools.yml` is to stand alone with no host dependencies (not even Dockerfiles), yet provide boilerplate that's parametric enough to work pretty well across different projects without changing the compose file.  Read on in the next section for more details about the manifest.

{# <hr style="width:100%;border-bottom:3px solid black;"> #}
